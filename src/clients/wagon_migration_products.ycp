/**
 * File:
 *	clients/wagon_migration_products.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id$
 *
 */

{
    /**
     * Selects and installs all migration products.
     */

    textdomain "wagon";

    import "Wagon";
    import "PackagesUI";
    import "GetInstArgs";
    import "Report";
    import "Popup";
    import "Label";

    include "wagon/common_func.ycp";

    if (GetInstArgs::going_back()) {
	y2milestone ("Going back...");
	return `back;
    }

    Wagon::RunHooks("before_installing_migration_products");

    integer UpdateInstalledProducts () {
	integer affected_products = 0;

	list <map <string,any> > products = Pkg::ResolvableProperties ("", `product, "");

	foreach (map<string, any> p, products, {
	    // Product is not installed
	    if (p["status"]:`unknown != `installed) return;

	    // Make the logs readable
	    p["license"] = "...";
	    p["description"] = "...";

	    string product_name = p["name"]:"";
	    string product_version = p["version"]:"";

	    if (product_name == nil || product_name == "") {
		y2error ("Cannot distinguish product name: %1", product_name);
		return;
	    }

	    y2milestone ("Upgrading product %1 version %2", product_name, product_version);

	    if (Pkg::ResolvableUpdate(product_name, `product))
	    {
		affected_products = affected_products + 1;
	    }
	});

	return affected_products;
    }

    boolean FindAndSelectMigrationProducts () {
	if (Wagon::InitPkg() != true) {
	    Report::Error (_("Unable to initialize the package manager."));
	    return false;
	}

	list <map <string,any> > products = Pkg::ResolvableProperties ("", `product, "");

	foreach (map<string, any> p, products, {
	    if (p["status"]:`unknown != `installed) {
		y2milestone ("Product %1 (%2) is not installed, skipping...",
		    p["name"]:"not-defined", p["short_name"]:p["display_name"]:"not-defined");
		return;
	    }

	    if (! haskey (p, "upgrades") || p["upgrades"]:[] == []) {
		y2warning ("Product %1 (%2) does not contain 'upgrades' section...",
		    p["name"]:"not-defined", p["short_name"]:p["display_name"]:"not-defined");
		return;
	    }

	    y2milestone ("Going to upgrade product %1 (%2)",
		p["name"]:"not-defined", p["short_name"]:p["display_name"]:"not-defined");

	    if (p["name"]:"" == nil || p["name"]:"" == "") {
		y2error ("Product %1 doesn't have a name, reverting will be impossible", p);
		Report::Error (sformat(_("Product %1 does not have a machine-readable 'name'.
Automatic reverting of the product state will be impossible."),  p["short_name"]:p["display_name"]:"not-defined"));
	    }

	    foreach (map <string, any> supported_upgrade, (list <map <string, any> >) p["upgrades"]:[], {
		if (! haskey (supported_upgrade, "product") || supported_upgrade["product"]:"" == "") {
		    y2error ("Erroneous product upgrades: %1 (%2)", p, supported_upgrade);
		    Report::Error (sformat (_("Cannot upgrade product %1 (%2).
Migration path is erroneous."),  p["display_name"]:p["short_name"]:_("Unknown"), p["name"]:_("not-defined")));
		    return;
		}

		string old_product = p["name"]:"";
		string migration_product = supported_upgrade["product"]:"";

		// Install the migration product
		if ((size (Pkg::ResolvableProperties (migration_product, `product, "")) == 0) || (Pkg::ResolvableInstall (migration_product, `product) != true)) {
		    y2error ("Cannot select migration product for installation: %1", Pkg::ResolvableProperties (migration_product, `product, ""));
		    Report::Error (sformat (_("Cannot select product
%1 (%2) for installation."), supported_upgrade["name"]:"", migration_product));
		    return;
		} else {
		    Wagon::migration_products = add (Wagon::migration_products, migration_product);
		}

// Old products are removed automatically during the upgrade
//		// Remove the old product
//		if ((Pkg::ResolvableInstalled (old_product, `product) != true) || (Pkg::ResolvableRemove (migration_product, `product) == true)) {
//		    Report::Error (sformat (_("Cannot select product %1 for deinstallation."), migration_product));
//		    return;
//		}
	    });
	});

	return true;
    }

    /**
     * Finds all products that contain information about their migration product
     * finds which repositories provide these products and disables the
     * repositories.
     *
     * @see BNC #573092
     */
    boolean FindOldRepositoriesToBeDisabled () {
	if (Wagon::InitPkg() != true) {
	    Report::Error (_("Unable to initialize the package manager."));
	    return false;
	}

	list <map <string,any> > products = Pkg::ResolvableProperties ("", `product, "");

	// all known products
	products = filter (map<string, any> p, products, {
	    // skip those not installed ones
	    if (p["status"]:`unknown != `installed) {
		y2milestone ("Product %1 (%2) is not installed, skipping...",
		    p["name"]:"not-defined", p["short_name"]:p["display_name"]:"not-defined");
		return false;
	    }

	    // skip those that do not provide 'upgrades' section
	    if (! haskey (p, "upgrades") || p["upgrades"]:[] == []) {
		y2warning ("Product %1 (%2) does not contain 'upgrades' section...",
		    p["name"]:"not-defined", p["short_name"]:p["display_name"]:"not-defined");
		return false;
	    }

	    y2milestone ("Going to disable repositories providing product %1 (%2)",
		p["name"]:"not-defined", p["short_name"]:p["display_name"]:"not-defined");

	    if (p["name"]:"" == nil || p["name"]:"" == "") {
		y2error ("Product %1 doesn't have a name, reverting will be impossible", p);
		Report::Error (sformat(_("Product %1 does not have a machine-readable 'name'.
It cannot be disabled."),  p["short_name"]:p["display_name"]:"not-defined"));
		return false;
	    }

	    return true;
	});

	// all installed, those that provide 'upgrades' section, and have a name
	foreach (map<string, any> p, products, {
	    // Find all available matching products
	    list <map <string, any> > matching_products = Pkg::ResolvableProperties (p["name"]:"", `product, "");
	    matching_products = filter (map <string, any> one_product, matching_products, {
		return (one_product["status"]:`unknown == `available);
	    });

	    list <integer> product_repos = [];
	    integer repo_id = nil;
	    map repo_details = nil;

	    // installed product is not available anymore
	    if (matching_products == nil || size (matching_products) == 0) {
		matching_products = [];
		y2warning ("Nothing provides `available product: '%1'", p["name"]:"");
	    } else {
		foreach (map <string, any> one_product, matching_products, {
		    repo_id = one_product["source"]:-1;

		    if (repo_id == nil || repo_id < 0) {
			y2error ("Available product with wrong source id: %1", Wagon::MinimizeProductMap (one_product));
		    } else {
			y2milestone ("Repo %1 will be disabled, provides product %2", repo_id, p["name"]:"");
			product_repos = add (product_repos, repo_id);
		    }
		});
	    }

	    // BNC #579905: Some repositories provide packages with products but these products
	    // are not mentioned in metadata. We have to disable also these repositories.
	    string inst_product_package_name = GetProductPackageName (p);
	    list <map <string, any> > matching_packages = Pkg::ResolvableProperties (inst_product_package_name, `package, "");

	    foreach (map <string, any> one_package, matching_packages, {
		// operate with available packages only
		if (one_package["status"]:`unknown != `available)
		    return;

		repo_id = one_package["source"]:-1;

		if (repo_id == nil || repo_id < 0) {
		    y2error ("Available package with wrong source id: %1", Wagon::MinimizeProductMap (one_package));
		} else {
		    y2milestone ("Repo %1 will be disabled, provides product package %2", repo_id, inst_product_package_name);
		    product_repos = add (product_repos, repo_id);
		}
	    });

	    // Check all 
	    foreach (integer repo_id, product_repos, {
		repo_details = Pkg::SourceGeneralData (repo_id);
		Wagon::repositories_to_disable = add (Wagon::repositories_to_disable, repo_details["alias"]:"");
	    });

	    Wagon::repositories_to_disable = toset (Wagon::repositories_to_disable);
	});

	y2milestone ("Repositories to be disabled later: %1", Wagon::repositories_to_disable);

	return true;
    }

    Wagon::InitPkg();

    Wagon::ReadProductsBeforeMigration();
    Wagon::StoreProductsBeforeMigration();

    // BNC #573084: New code (upgrading products) can be added after
    // wagon self-upgrade and restart
    integer products_for_upgrade = UpdateInstalledProducts();

    if (products_for_upgrade > 0) {
	symbol ret = SolveDependencies();

	if (ret != `abort && ret != `cancel) {
	    y2milestone ("Upgrading %1 product packages...", products_for_upgrade);
	    any inst_ret = WFM::call ("inst_rpmcopy");
	    y2milestone ("Product package upgrade returned: %1", inst_ret);
	    ret = `auto;
	} else {
	    return `abort;
	}

	ResetPackager();
    } else {
	y2warning ("No products selected for upgrade");
    }

    if (FindAndSelectMigrationProducts() != true) {
        Wagon::RunHooks("after_installing_migration_products");
	return `auto;
    }

    symbol ret = SolveDependencies();

    if (ret != `abort && ret != `cancel) {
	// Solver ends with some resolvables changed
	if (Pkg::IsAnyResolvable (`any, `to_install) == true || Pkg::IsAnyResolvable (`any, `to_remove) == true) {
	    y2milestone ("Installing packages...");
	    // Everybody hold your breath 'cause we're gonna be sinkin' soon
	    any inst_ret = WFM::call ("inst_rpmcopy");
	    y2milestone ("Package installation returned: %1", inst_ret);
	    ret = `auto;
	} else {
	    y2milestone ("Nothing to install/remove");
	    ret = `auto;
	}
    }

    ResetPackager();

    if (ret == `auto)
    {
        Wagon::RunHooks("after_installing_migration_products");
    }

    y2milestone ("Returning: %1", ret);

    return ret;
}
