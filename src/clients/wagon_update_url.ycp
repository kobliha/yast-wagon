/**
 * File:
 *	clients/wagon_update_url
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id$
 *
 */

{
    import "Wizard";
    import "GetInstArgs";
    import "Popup";
    import "Icon";
    import "Wagon";

    textdomain "wagon";

    Wagon::RunHooks("before_selecting_migration_source");

    string frame_label = _("Select from Where to Get the Update URL");
    integer frame_width = (UI::TextMode() ? 2 * size (frame_label) : 2.2 * size (frame_label));

    string current_workflow = Wagon::GetUpdateWorkflow();

    // Default workflow
    if (current_workflow != "manual_suse_register" && current_workflow != "manual_custom_url") {
	current_workflow = "manual_suse_register";
	y2milestone ("Default workflow is: %1", current_workflow);
    }

    term contents = `HSquash (`MinWidth (frame_width, `Frame (
	frame_label,
	`MarginBox (1, 1,
	    `RadioButtonGroup (
		`id (`update_url),
		`VBox (
		    `HBox (
			`HBox (`Image (Icon::IconPath ("yast-update"), ""), `HSpacing (2)),
			`VBox (
			    `Left(`RadioButton (`id (`suse_register), _("&Customer Center"), (current_workflow == "manual_suse_register"))),
			    `HBox (
				`HSpacing (2),
				`Left(`CheckBox (`id (`manual_check), _("Check Automatic &Repository Changes"), Wagon::check_repositories_manually))
			    )
			),
			`HStretch()
		    ),
		    `VSpacing (1),
		    `HBox (
			`HBox (`Image (Icon::IconPath ("yast-cd_update"), ""), `HSpacing (2)),
			`RadioButton (`id (`custom_url), _("Custom &URL"), (current_workflow == "manual_custom_url")),
			`HStretch()
		    )
		)
	    )
	)
    )));

    string heading_text = _("Update Method");

    // help text 1
    string help_text = _("<p>Here you can choose whether to use the <b>Customer Center</b>
to handle the installation repositories during migration or use <b>Custom &URL</b>
if you want to set them manually.</p>") +
    // help text 2
    _("<p>Additionally, select <b>Check Automatic Repository Changes</b> to ensure
that Customer Center has modified the repositories correctly. You can also modify
them there too.</p>");

    Wizard::SetContents (heading_text, contents, help_text,
	GetInstArgs::enable_back(), GetInstArgs::enable_next());
    Wizard::EnableAbortButton ();

    any ui_ret = nil;
    symbol ret = nil;

    while (true) {
	ui_ret = UI::UserInput();

	if (ui_ret == `back) {
	    ret = `back;
	    break;
	} else if (ui_ret == `next) {
	    any selected = UI::QueryWidget (`id (`update_url), `CurrentButton);
	    y2milestone ("Selected workflow: %1", selected);

	    if (selected == `suse_register) {
		Wagon::check_repositories_manually = ((boolean) UI::QueryWidget (`id (`manual_check), `Value) == true);
		y2milestone ("Checking repos manually: %1", Wagon::check_repositories_manually);
		Wagon::SetMigrationMethod("suse_register");
	    } else if (selected == `custom_url) {
		// custom URL uses the same dialog in a different context
		Wagon::check_repositories_manually = false;
		y2milestone ("Checking repos manually: %1", Wagon::check_repositories_manually);
		Wagon::SetMigrationMethod("custom");
	    }

	    Wagon::AdjustVariableSteps();
	    // Check whether we have a useful workflow
	    if (Wagon::SetWizardSteps()) {
		Wagon::AdjustVariableSteps();
		Wagon::RedrawWizardSteps();
		ret = `next;
		break;
	    }
	} else if (ui_ret == `abort) {
	    if (Popup::ConfirmAbort (`painless)) {
		ret = `abort;
		break;
	    }
	}
    }

    if (ret == `next)
    {
        Wagon::RunHooks("after_selecting_migration_source");
    }

    return ret;
}
