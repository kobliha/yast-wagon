/**
 * File:
 *	clients/wagon_dup_repositories.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Ladislav Slezak <lslezak@suse.cz>
 *
 * Summary:
 *	Display dialog for selecting distribution upgrade repositories.
 *
 *
 */

{
    textdomain "wagon";

    import "Wagon";
    import "GetInstArgs";
    import "Wizard";
    import "Popup";

    include "wagon/common_func.ycp";

    Wagon::RunHooks("before_set_migration_repo");

    define list TableContent()
    {
	// current enabled repositories
	list<integer> repos = Pkg::SourceGetCurrent(true);
	list<integer> dup_repos = Wagon::DupRepos();
	list ret = [];

	y2internal("Current repositories: %1", repos);
	y2internal("DUP repositories: %1", dup_repos);

	foreach(integer repo, repos,
	    {
		map info = Pkg::SourceGeneralData(repo);
		// if nothing selected yet propose all repositories
		string selected = (dup_repos == [] || contains(dup_repos, repo)) ? UI::Glyph(`CheckMark) : "";

		ret = add(ret, `item(`id(repo), selected, info["name"]:"", info["url"]:""));
	    });

	y2internal("Table content: %1", ret);

	return ret;
    }

    // display the repository selection dialog
    define void SetContent()
    {
	// heading text
	string heading_text = _("Migration Repositories");

	term contents = `VBox(
	    `Left(`Label(_("The packages will be switched to versions in the selected repositories."))),
	    `Table(`id(`table), `opt(`notify, `immediate, `keepSorting), `header(`Center(_("Selected")), _("Name"), _("URL")), TableContent()),
	    `HBox(
		`PushButton(`id(`select), _("Select")),
		`PushButton(`id(`deselect), _("Deselect"))
	    )
	);

	// help text
	string help_text = "<p>" + _("Select the repositories which will be used for migration.")
	    + "</p><p>" + _("The installed packages will be switched to the versions available in the selected migration repositories.") + "</p>";

	Wizard::SetContents (heading_text, contents, help_text,
	    GetInstArgs::enable_back(), GetInstArgs::enable_next());
    }

    // run the repository selection dialog
    define symbol DupSelectionDialog()
    {
	SetContent();

	symbol ret = nil;

	while (true) {
	    map event = UI::WaitForEvent();
	    ret = event["ID"]:`nothing;

	    if (ret == `table && event["EventReason"]:"" == "Activated")
	    {
		ret = `toggle;
	    }

	    if (ret == `back)
	    {
		break;
	    }
	    else if (ret == `next)
	    {
		y2milestone("Table content: %1", UI::QueryWidget(`id(`table), `Items));

		list<term> table_lines = (list<term>)UI::QueryWidget(`id(`table), `Items);
		list<integer> selected = [];

		foreach(term table_line, table_lines,
		    {
			if (table_line[1]:"" != "")
			{
			    selected = add(selected, table_line[0,0]:-1);
			}
		    });

		if (size(selected) == 0)
		{
		    // error message, no migration repository selected in the table
		    Popup::Error("Select at least one migration repository.");
		    continue;
		}

		y2milestone("Selected repositories for distribution upgrade: %1", selected);

		Wagon::SetDupRepos(selected);

		break;
	    }
	    else if ((ret == `abort || ret == `cancel || ret == `close) && Popup::ConfirmAbort (`painless))
	    {
		ret = `abort;
		break;
	    }
	    else if (ret == `select || ret == `deselect || ret == `toggle)
	    {
		integer current = (integer) UI::QueryWidget(`id(`table), `CurrentItem);
		string selected = "";

		if (ret == `toggle)
		{
		    // toggle the flag
		    string current_value = (string)UI::QueryWidget(`id(`table), `Cell(current, 0));
		    selected = (current_value == "") ? UI::Glyph(`CheckMark) : "";
		}
		else
		{
		    selected = (ret == `select) ? UI::Glyph(`CheckMark) : "";
		}

		UI::ChangeWidget(`id(`table), `Cell(current, 0), selected);
	    }
	    else
	    {
		y2error("Unknown user input: %1", ret);
	    }
	}

	return ret;
    }

    void SetMigrationSelectionDialogContent()
    {
	// heading text
	string heading_text = _("Migration Type");
	// full migration?
	boolean full = Wagon::MigrationType() == `full;

	term contents = `VBox(
	    // frame label
	    `Frame(_("Migration type"),
		`HSquash(
		    `MarginBox(2, 0.5,
			`RadioButtonGroup(`id(`migration_type),
			    `VBox(
				// radio button
				`Left(`RadioButton(`id(`minimal), _("&Minimal - upgrade from repositories added by registration"), !full)),
				// radio button
				`Left(`RadioButton(`id(`full), _("&Full - install also available patches in addition to Minimal migration"), full))
			    )
			)
		    )
		)
	    ),

	    `VSpacing(2),

	    // push button
	    `PushButton(`id(`advanced), _("Advanced..."))
	);

	// help text
	string help_text = "<p>" + _("Select the requested migration type.")
	    // help text
	    + "</p><p>" + _("Minimal migration only uses the repositories added by registration, full migration migrates all packages to the latest versions available in any enabled repository. Full migration might use third party repositories.")
	    // help text
	     + "</p><p>" + _("Press <b>Advanced</b> to manually select the repositories used for upgrading.") + "</p>";

	Wizard::SetContents (heading_text, contents, help_text,
	    GetInstArgs::enable_back(), GetInstArgs::enable_next());
    }

    symbol MigrationSelectionDialog()
    {
	SetMigrationSelectionDialogContent();

	symbol ret = nil;

	list<integer> prev_dup_repos =  Wagon::DupRepos();
	boolean prev_manual_selection = Wagon::ManualRepoSelection();
	symbol prev_migration_type = Wagon::MigrationType();

	while (true) {
	    // go to advanced config it was used previously
	    ret = (Wagon::ManualRepoSelection()) ? `advanced : (symbol)UI::UserInput();

	    if (ret == `next)
	    {
		// set the update repositories
		symbol mtype = (symbol) UI::QueryWidget(`id(`migration_type), `CurrentButton);
		y2milestone("Selected migration type: %1", mtype);

		if (mtype == `full || mtype == `minimal)
		{
		    y2milestone("Selected minimal or full migration, using these repositories: %1", Wagon::RegistrationRepos());

		    map<string, integer> alias_to_id = $[];
		    foreach(integer repo, Pkg::SourceGetCurrent(true),
			{
			    alias_to_id[Pkg::SourceGeneralData(repo)["alias"]:""] = repo;
			}
		    );

		    list<integer> added_repos = maplist(string alias, Wagon::RegistrationRepos(),
			{
			   return alias_to_id[alias]:-1;
			}
		    );

		    y2milestone("Converted aliases to ids: %1", added_repos);

		    Wagon::SetDupRepos(added_repos);
		    Wagon::SetManualRepoSelection(false);
		    Wagon::SetMigrationType(mtype);
		}
		else
		{
		    // error popup message
		    Popup::Error(sformat(_("Selected unknown migration type: %1."), mtype));
		    y2error("Unknown migratinon type: %1", mtype);

		    continue;
		}

		break;
	    }
	    else if (ret == `back)
	    {
		break;
	    }
	    else if (ret == `abort || ret == `close)
	    {
		break;
	    }
	    else if (ret == `advanced)
	    {
		// manually select DUP repositories
		y2milestone("Manual DUP repository selection selected");
		ret = DupSelectionDialog();

		if (ret == `abort || ret == `close)
		{
		    break;
		}
		else if (ret == `next)
		{
		    Wagon::SetManualRepoSelection(true);
		    Wagon::SetMigrationType(`custom);
		    break;
		}
		else if (ret == `back)
		{
		    // refresh the dialog
		    SetMigrationSelectionDialogContent();
		    Wagon::SetManualRepoSelection(false);
		}
		else
		{
		    y2error("Unexpected user input: %1", ret);
		}
	    }
	    else
	    {
		y2error("Unexpected user input: %1", ret);
	    }
	}

	if (ret == `next && (prev_dup_repos != Wagon::DupRepos() || prev_manual_selection != Wagon::ManualRepoSelection() || prev_migration_type != Wagon::MigrationType()))
	{
	    y2milestone("DUP repository config has been changed, repropose package selection");
	    Wagon::ResetDUPProposal();

	    // reset current package selection
	    ResetPackager();
	}

	return ret;
    }

    // for custom migration repo we cannot select full/core migration type,
    // and also when there is no new registration repo we cannot detect full/core migrations
    // => go directly to the repository selection (advanced option)
    symbol ret = (Wagon::GetMigrationMethod() == "suse_register" && size(Wagon::RegistrationRepos()) > 0) ? MigrationSelectionDialog() : DupSelectionDialog();

    y2milestone ("Result: %1", ret);

    if (ret == `next)
    {
        Wagon::RunHooks("after_set_migration_repo");
    }

    return ret;
}
