/**
 * File:
 *	clients/wagon.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *	Alois Nebel <e-mail address is unknown>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id$
 *
 */
{
    import "ProductControl";
    import "Mode";
    import "Stage";
    import "Wizard";
    import "Directory";
    import "FileUtils";
    import "Wagon";
    import "CommandLine";
    import "PackageLock";
    import "PackageCallbacks";
    import "Report";
    import "FileUtils";

    include "wagon/common_func.ycp";

    textdomain "wagon";

    // --> CommandLine support 

    list wfm_args = WFM::Args();
    y2milestone ("ARGS: %1", wfm_args);

    map <string, any> commands = CommandLine::Parse (wfm_args);
    y2milestone ("Commands: %1", commands);

    if (commands["command"]:"" == "help" || commands["command"]:"" == "longhelp" || commands["command"]:"" == "xmlhelp") {
	Wagon::ProcessCommandLine (commands);
	return `auto;
    }

    // <-- CommandLine support 

    string do_restart = Directory::vardir + "/restart_yast";

    // Start workflow from step ...
    string current_step_file = Directory::vardir + "/wagon-current_workflow_step";
    // Start with workflow
    string current_workflow_file = Directory::vardir + "/wagon-current_workflow_file";

    integer current_step = 0;

    string custom_workflow_file = "/usr/share/YaST2/control/online_migration.xml";

    boolean Init () {
	ProductControl::custom_control_file = custom_workflow_file;
	ProductControl::Init();

	Mode::SetMode ("update");
	Stage::Set ("normal");

	ProductControl::AddWizardSteps ([$["stage":Stage::stage(), "mode":Mode::mode()]]);

	// Can't acquire packager lock
	// BNC #616982
	map <string,any> pkg_connected = PackageLock::Connect(false);
	if (pkg_connected["connected"]:false != true) {
	    y2warning ("PackageLock not obtained");
	    return false;
	}

	Wagon::Init (commands);

	return true;
    }

    // In case of restarting YaST, adjust the environment
    // Prepare YaST for restart
    void HandleRet (symbol ret) {
	if (ret == `restart_same_step || ret == `restart_yast || ret == `reboot) {
	    y2milestone ("YaST will be restarted, returned: %1", ret);
	    SCR::Write (.target.ycp, do_restart, "restart_yast");

	    if (ret == `restart_same_step) {
		current_step = ProductControl::CurrentStep();
		// We actually don't want to restart the same step, we want to continue
		// directly with the very next step
		//
		// The current step + 1 == the very next step
		integer next_step = current_step + 1;
		y2milestone ("YaST will be restarted starting from the very next step: %1", next_step);
		SCR::Write (.target.ycp, current_step_file, next_step);

		// Also the current workflow type has to be stored
		string current_workflow = Wagon::GetUpdateWorkflow();
		y2milestone ("Current workflow is '%1'", current_workflow);
		SCR::Write (.target.ycp, current_workflow_file, current_workflow);

		// Store also current migration method
		string current_method = Wagon::GetMigrationMethod();
		y2milestone ("Current migration method is '%1'", current_method);
		SCR::Write (.target.ycp, Wagon::migration_method_file, current_method);
	    }
	}

	if (ret == `restart_same_step || ret == `restart_yast || ret == `reboot || ret == `accept || ret == `next) {
	    y2milestone ("Storing all the current sources...");
	    Pkg::SourceSaveAll();
	}

	if (ret == `restart_same_step || ret == `restart_yast || ret == `reboot)
        {
            Wagon::RunHooks("before_restart");
        }
    }

    // Checks whether YaST has been restarted
    // Adjust step to start with
    void HandleInit () {
	// logs what user does in UI
	UI::RecordMacro (Directory::logdir + "/macro_online_migration.ycp");

	if (FileUtils::Exists (do_restart)) {
	    y2milestone ("YaST has been restarted");
	    SCR::Execute (.target.remove, do_restart);

	    if (FileUtils::Exists (current_step_file)) {
		current_step = (integer) SCR::Read (.target.ycp, current_step_file);
		SCR::Execute (.target.remove, current_step_file);

		if (current_step == nil || current_step < 0) {
		    y2error ("Current step is %1, running from the beginning", current_step);
		    current_step = 0;
		} else {
		    y2milestone ("Adjusting starting step: %1", current_step);
		}
	    }

	    if (FileUtils::Exists (current_workflow_file)) {
		string workflow_type = (string) SCR::Read (.target.ycp, current_workflow_file);
		SCR::Execute (.target.remove, current_workflow_file);

		if (workflow_type == nil || workflow_type == "") {
		    y2error ("Requested workflow type is invalid: %1", workflow_type);
		} else {
		    y2milestone ("Adjusting required workflow type: %1", workflow_type);
		    Wagon::SetUpdateWorkflow (workflow_type);
		}
	    }

	    if (FileUtils::Exists (Wagon::migration_method_file)) {
		string migration_method = (string) SCR::Read (.target.ycp, Wagon::migration_method_file);
		SCR::Execute (.target.remove, Wagon::migration_method_file);

		if (migration_method == nil || migration_method == "") {
		    y2error ("Migration method is invalid: %1", migration_method);
		} else {
		    y2milestone ("Adjusting to migration method: %1", migration_method);
		    Wagon::SetMigrationMethod (migration_method);
		}
	    }

            Wagon::RunHooks("after_restart");
	}
    }

    boolean RevertToOldProducts () {
	if (Wagon::abort_can_revert_products != true) {
	    y2warning ("Cannot revert the previous state of products, sorry. Installed products were: %1, Migration products were: %2",
		Wagon::products_before_migration, Wagon::migration_products);

	    Report::Warning (_("Cannot revert the previous state of installed products.
You will have to revert them manually."));

	    return false;
	}


	Wizard::SetContents (
	    _("Reverting Migration"),
	    `Label(_("Migration tool has to remove the temporary migration products,
install the previously installed ones and contact Novell Customer Center
to get update repositories.")),
	    _("<p>Several tasks can be done by the migration tool. If you skip this step,
you will have to do them manually.</p>"),
	    false, true
	);
	Wizard::EnableAbortButton ();

	boolean cont = true;
	while (true) {
	    any ret = UI::UserInput();
	    if (ret == `next) {
		cont = true;
		break;
	    } else if (ret == `abort || ret == `cancel) {
		if (Popup::AnyQuestion (
		    // popup dialog caption
		    _("Migration Has to Be Reverted"),
		    // popup dialog qustion
		    _("Are you sure you want to skip reverting the migration?"),
		    // button
		    _("&Yes, Skip It"),
		    // button
		    _("&No"),
		    `focus_no
		)) {
		    cont = false;
		    break;
		}
	    }
	}

	if (cont != true) {
	    y2warning ("User decided not to rollback");
	    return false;
	}

        Wagon::RunHooks("before_abort_rollback");

	ResetPackager();

	Wizard::SetContents (
	    _("Reverting Migration"),
	    `Label(_("Removing temporary migration products...")),
	    "",
	    false, true
	);

	y2milestone ("Repositories disabled by migration: %1", Wagon::disabled_repositories);
	foreach (string repo_alias, Wagon::disabled_repositories, {
	    integer repo_id = FindRepoIdByAlias (repo_alias);

	    if (repo_id == nil) {
		y2error ("Cannot enable repo (alias)%1, repo not found ", repo_alias);
		Report::Error (sformat(_("Cannot enable repository with alias
%1
Repository was not found."), repo_alias));
		return;
	    }

	    y2milestone ("Enabling repository %1 returned: %2", repo_id, Pkg::SourceSetEnabled (repo_id, true));
	});

	Pkg::SourceSaveAll();
	Wagon::InitPkg();

	// Packages removed by this run
	list <string> removed_packages = [];

	// Remove all the migration products using packages approach manually
	// Removing via ResolvableRemove + PkgSolve usually produces errors,
	// dependency loops etc.
	//
	y2milestone ("Removing newly installed products: %1", Wagon::migration_products);
	foreach (string migration_product, Wagon::migration_products, {
	    foreach (map <string, any> remove_product, Pkg::ResolvableProperties (migration_product, `product, ""), {
		remove_product = Wagon::MinimizeProductMap (remove_product);

		string package_name = GetProductPackageName (remove_product);

		if (package_name == "")
		    return;

		// Package has been already removed
		if (contains (removed_packages, package_name))
		    return;

		if (Pkg::TargetRemove (package_name) != true) {
		    y2error ("Cannot remove package %1", package_name);
		    Report::Error (sformat(_("Cannot remove product %1.
Remove package %2 manually"), remove_product["name"]:_("Unknown product"), package_name));
		    return;
		}

		y2milestone ("Product %1/%2 has been successfully removed", remove_product, package_name);

		// Do not try to remove it again
		removed_packages = add (removed_packages, package_name);
	    });
	});

	if (size (removed_packages) > 0) {
	    y2milestone ("%1 products were removed, reseting packager", size (removed_packages));
	    ResetPackager();

	    foreach (string one_package, removed_packages, {
		y2milestone ("Removed product package check: %1", Pkg::ResolvableProperties (one_package, `package, ""));
	    });
	}

	y2milestone ("Running registration");
	if (WFM::call ("inst_suse_register") == `abort) {
	    y2error ("Unable to register");
	    return false;
	}

        Wagon::RunHooks("after_abort_rollback");

	return true;
    }

    // Hooks for testing and manual changes
    // --> /usr/lib/YaST2/bin/wagon_hook_init
    Wagon::RunHook ("init");

    Wagon::RunHooks("before_init");

    // main()
    HandleInit();

    Wizard::OpenNextBackStepsDialog();
    Wizard::SetTitleIcon ("yast-update");

    symbol ret = `auto;

    // Exit WAGON if we can't initialize correctly
    if (Init() != true) {
	ret = `abort;
    } else {
	ret = ProductControl::RunFrom (current_step, false);
    }

    // Wagon has been aborted, revert to the previous products
    // if possible
    if (ret == `abort || ret == `cancel) {
        Wagon::RunHooks("before_abort");
	RevertToOldProducts();
    }

    Wizard::CloseDialog();

    HandleRet (ret);

    // Hooks for testing and manual changes
    // --> /usr/lib/YaST2/bin/wagon_hook_finish
    Wagon::RunHook ("finish");

    Wagon::RunHooks("before_exit");

    return ret;
}
