/**
 * File:
 *	clients/wagon_registration_check.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Ladislav Slezak <lslezak@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 *
 */

{
    textdomain "wagon";

    import "GetInstArgs";
    import "Wagon";
    import "Wizard";
    import "Popup";

    Wagon::RunHooks("before_registration_check");

    // max age for the registration status (in days)
    integer max_age_days = 90;
    // max age for the registration status (in seconds)
    integer max_age = max_age_days * 24 * 60 * 60;

    // is the registration status file outdated?
    define boolean OutdatedStatus(map<string,any> status)
    {
	// missing data, we cannot tell if it's outdated, suppose not
	if (!haskey(status, "timestamp") || status["timestamp"]:0 <= 0)
	{
	    return false;
	}

	boolean ret = status["timestamp"]:time() + max_age < time();
	y2milestone("Registration status is outdated: %1", ret);

	return ret;
    }

    // get deatils about an installed product
    define map<string,any> InstalledProduct(string name)
    {
	list<map<string,any> > products = Pkg::ResolvableProperties(name, `product, "");
	products = filter(map<string,any> prod, products, {
	    return prod["status"]:nil == `installed;
	});

	if (size(products) > 1)
	{
	    y2warning("Found %1 products: %2", size(products), products);
	}

	return products[0]:$[];
    }

    // return list of installed but unregistered products
    define list<map<string,any> > UnknownProducts(map<string,any> status)
    {
	list<string> known_products = (list<string>)(status["registered"]:[] + status["provisional"]:[]
	    + status["rma"]:[] + status["expired"]:[] + status["no_subscription"]:[] + status["failed"]:[]);

	list<map<string,any> > unknown_products = Pkg::ResolvableProperties("", `product, "");
	unknown_products = filter(map<string,any> prod, unknown_products, {
	    return prod["status"]:nil == `installed && !contains(known_products, prod["name"]:"");
	});

	y2milestone("Found unregistered installed products: %1", unknown_products);

	return unknown_products;
    }

    // convert registration status map into a rich text summary
    define string RegistrationSummary(map<string,any> status)
    {
	string msg = "<h3>" + _("Registration Summary") + "</h3>";

	if (!status["registered_system"]:false)
	{
	    msg = msg + "<p>" + _("The system is not registered.") + "</p>";
	}
	else
	{
	    msg = msg + "<ul>";

	    foreach(string prod, (list<string>)status["registered"]:[],
		{
		    msg = msg + "<li>" + sformat(_("Product <b>%1</b> has a valid registration."),
			InstalledProduct(prod)["display_name"]:prod) + "</li>";
		}
	    );

	    foreach(string prod, (list<string>)status["no_subscription"]:[],
		{
		    msg = msg + "<li>" + sformat(_("Product <b>%1</b> does not need a subscription."),
		    InstalledProduct(prod)["display_name"]:prod) + "</li>";
		}
	    );

	    foreach(map<string,any> prod, UnknownProducts(status),
		{
		    msg = msg + "<li>"
			+ sformat(_("Registration status of product <b>%1</b> is unknown."), prod["display_name"]:"")
			+ "</li>";
		}
	    );

	    foreach(string prod, (list<string>)status["failed"]:[],
		{
		    msg = msg + "<li><font color=\"red\">"
			+ sformat(_("Product <b>%1</b> is not registered, registration failed."),
			    InstalledProduct(prod)["display_name"]:prod)
			+ "</font></li>";
		}
	    );

	    foreach(string prod, (list<string>)status["rma"]:[],
		{
		    msg = msg + "<li><font color=\"red\">"
			+ sformat(_("Registration for product <b>%1</b> has been refunded, the product is not registered."),
			    InstalledProduct(prod)["display_name"]:prod)
			+ "</font></li>";
		}
	    );

	    foreach(string prod, (list<string>)status["expired"]:[],
		{
		    msg = msg + "<li><font color=\"red\">"
			+ sformat(_("Registration for product <b>%1</b> has expired, the registration is not valid anymore."),
			    InstalledProduct(prod)["display_name"]:prod)
			+ "</font></li>";
		}
	    );

	    foreach(string prod, (list<string>)status["provisional"]:[],
		{
		    msg = msg + "<li><font color=\"red\">"
			+ sformat(_("Registration for product <b>%1</b> is provisional only, no updates available"),
			    InstalledProduct(prod)["display_name"]:prod)
			+ "</font></li>";
		}
	    );

	    msg = msg + "</ul>";
	}

	msg = msg + "<br>";

	if (OutdatedStatus(status))
	{
	    integer days_outdated = (time() - status["timestamp"]:0) / 60 / 60 / 24;
	    msg = msg + "<p>" +
		sformat(_("The registration status is %1 days old. The summary above might not be correct, run registration to update the status."), days_outdated)
		+ "</p>";
	}

	// display a critical warning
	if (size(status["provisional"]:[]) > 0 || size(status["rma"]:[]) > 0
	    || size(status["expired"]:[]) > 0 || size(status["failed"]:[]) > 0
	    || size(UnknownProducts(status)) > 0 || !status["registered_system"]:false)
	{
	    msg = msg + "<p><b>" + _("Warning:") + " </b>"
		+ _("We strongly recommend to register unregistered or expired products before starting migration.")
		+ "<br>" + _("Migrating an unregistered or partly registered system might result in a broken system.")
		+ "</p>";
	}

	y2milestone("Registration summary: %1", msg);

	return msg;
    }

    // set registration summary dialog content
    define void SetContent(map<string,any> status)
    {
	// heading text
	string heading_text = _("Registration Check");

	term contents = `VBox(
	    `RichText(RegistrationSummary(status)),
	    `PushButton(`id(`registration), _("Run Registration..."))
	);

	// help text
	string help_text = "<p>" + _("YaST checks whether the installed products are registered.")
	    + "</p><p>" + _("Migrating an unregistered or partly registered system might result in a broken system.") + "</p>";

	Wizard::SetContents (heading_text, contents, help_text,
	    GetInstArgs::enable_back(), GetInstArgs::enable_next());

	Wizard::EnableAbortButton();
    }

    // run registration summary dialog
    define symbol RegistrationSummaryDialog(map<string,any> status)
    {
	SetContent(status);

	symbol ret = nil;

	while (true) {
	    ret = (symbol)UI::UserInput();

	    if (ret == `back || ret == `next)
	    {
		break;
	    }
	    else if ((ret == `abort || ret == `cancel || ret == `close) && Popup::ConfirmAbort (`painless))
	    {
		ret = `abort;
		break;
	    }
	    else if (ret == `registration)
	    {
		// start registration
		WFM::CallFunction("inst_suse_register");

		// refresh the registration status
		map<string,any> new_status = Wagon::RegistrationStatus();
		SetContent(new_status);
	    }
	}

	return ret;
    }

    // check whether the parsed registration status contains unregistered or
    // some other problem and user has to be informed about it
    define boolean Interactive(map<string,any> status)
    {
	// SMT doesn't write /var/lib/suseRegister/registration-status.xml file
	// so we cannot get any registration details, assume the system is fully registered
	if (status["ncc"]:nil == false)
	{
	    y2milestone("SMT server is used, assuming fully registered system");
	    return false;
	}

	// the system is not registered at all
	if (status["registered_system"]:false)
	{
	    y2milestone("Registration status is missing, interaction needed");
	    return true;
	}

	// the registration status is too old
	if (OutdatedStatus(status))
	{
	    y2milestone("Registration status is too old, interaction needed");
	    return true;
	}

	// a product in unregistered state
	if (size(status["provisional"]:[]) > 0 || size(status["rma"]:[]) > 0
	    || size(status["expired"]:[]) > 0 || size(status["failed"]:[]) > 0)
	{
	    y2milestone("Unregistered product found, interaction needed");
	    return true;
	}

	// an unknown product
	if (size(UnknownProducts(status)) > 0)
	{
	    y2milestone("Unknown product found, interaction needed");
	    return true;
	}

	y2milestone("Registration OK, skipping registration dialog");
	return false;
    }

    Wagon::InitPkg();
    // read the registration XML file
    map<string,any> reg_status = Wagon::RegistrationStatus();

    y2milestone("Read registration status: %1", reg_status);

    // if no user interation needed then go on
    if (!Interactive(reg_status))
    {
	if (GetInstArgs::going_back()) {
	    y2milestone ("Going back...");
	    return `back;
	}
	else
	{
            Wagon::RunHooks("after_registration_check");
	    return `next;
	}
    }

    symbol ret = RegistrationSummaryDialog(reg_status);

    y2milestone ("Result: %1", ret);

    if (ret == `next)
    {
        Wagon::RunHooks("after_registration_check");
    }

    return ret;
}
