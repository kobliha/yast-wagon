/**
 * File:
 *	clients/wagon_registration_handler.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id:$
 *
 */

{
    /**
     * This is a handler scipt for registration that checks whether registration
     * did its job and whether or not has user skipped it.
     * See more in BNC #575102.
     */

    import "Wagon";
    import "Popup";
    import "Mode";

    textdomain "wagon";

    include "wagon/common_func.ycp";

    Wagon::RunHooks("before_registration");

    void AdjustRegistrationHandlerScreen () {
	Wizard::SetContents (
	    _("Novell Customer Center Configuration"),
	    `Label(_("Checking the current repositories...")),
	    " ",
	    GetInstArgs::enable_back(),
	    GetInstArgs::enable_next()
	);
    }

    list <string> GetCurrentlyEnabledReposByAlias () {
	list <string> ret = [];
	map repo_data = $[];

	Wagon::InitPkg();
	foreach (integer repo_id, Pkg::SourceGetCurrent (true /* enabled only */), {
	    repo_data = Pkg::SourceGeneralData (repo_id);
	    if (repo_data == nil || repo_data == $[]) {
		y2error ("Erroneous repo ID: %1 - no repo data: %2", repo_id, repo_data);
		return;
	    }
	    ret = add (ret, repo_data["alias"]:"");
	});

	return sort (ret);
    }

    list<string> AddedRepos(list<string> prev, list<string> curr)
    {
	list<string> ret = [];

	// added repos = all current which were not in the previous state
	ret = filter(string curr_repo, curr, {return !contains(prev, curr_repo);});

	return ret;
    }

    // all repository aliases
    list <string> all_repos = GetCurrentlyEnabledReposByAlias();
    y2milestone ("Currently registered repositories: %1", all_repos);

    // BNC #576553: Adjusts suse_config sysconfig values according the control file
    AdjustSuseRegisterDefaults();

    symbol ret = `auto;

    AdjustRegistrationHandlerScreen();

    while (true) {
	// Only in mode=="normal" suse_register reads settings from sysconfig
	Mode::SetMode ("normal");
	y2milestone ("Running inst_suse_register...");
	ret = (symbol) WFM::CallFunction ("inst_suse_register", WFM::Args());
	y2milestone ("Script inst_suse_register returned: %1", ret);
	Mode::SetMode ("update");

	AdjustRegistrationHandlerScreen();

	// `abort, `cancel, `back ...
	// Just return the symbol
	if (ret != `next) {
	    y2milestone ("Registration returned %1", ret);
	    break;
	}
	// --> `next

	// Registration must have done something with repositories
	// e.g., register new ones, disable old ones - that's wanted
	list <string> current_repos = GetCurrentlyEnabledReposByAlias();
	if (all_repos != current_repos) {
	    Wagon::repos_already_registered = true;

	    // remember the added repositories
	    list<string> added = AddedRepos(all_repos, current_repos);
	    Wagon::SetRegistrationRepos(added);

	    y2milestone ("List of repositories has changed: %1", current_repos);
	    y2milestone("Added repositories: %1", added);
	    break;
	}

	// Registration was called again
	if (Wagon::repos_already_registered == true) {
	    y2milestone ("Repos already registered");
	    break;
	}

	y2warning ("Repos were not changed: %1", current_repos);

	// Never called before, nothing changed
	if (Popup::AnyQuestion (
	    // dialog caption
	    _("Warning"),
	    // pop-up question
	    _("No changes were made to the list of registered repositories.
This means that you either skipped the registration, there has been an 
error in the configuration, or the repositories have been added before.

Do you want to rerun the registration?
"),
	    _("&Yes"),
	    _("&No, Skip it"),
	    `focus_yes
	) == false) {
	    y2warning ("User does not want to rerun the registration");
	    break;
	}
    }

    if (ret == `next)
    {
        Wagon::RunHooks("after_registration");
    }

    return ret;
}
