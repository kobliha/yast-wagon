/**
 * File:
 *	clients/wagon_selfupdate.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id$
 *
 */

{
    textdomain "wagon";

    import "GetInstArgs";
    import "Wagon";
    import "FileUtils";
    import "ProductControl";
    import "ProductFeatures";
    import "Internet";
    import "OnlineUpdateCallbacks";
    import "Popup";
    import "Label";
    import "PackagesUI";
    import "Report";

    include "wagon/common_func.ycp";

    if (GetInstArgs::going_back()) {
	y2milestone ("Going back...");
	return `back;
    }

    Wagon::RunHooks("before_self_update");

    /**
     * Tries to upgrade packages got as parameter.
     *
     * @param list <string> of packages
     */
    integer UpgradePackages (list <string> & packages) {
	// Check the input
	packages = filter (string one_package, packages, {
	    return (one_package != nil && one_package != "");
	});

	integer pkgs_affected = 0;

	map <string, list <string> > installed_versions = $[];

	boolean some_packages_selected = false;

	foreach (string one_package, packages, {
	    // All packages of the given name
	    list <map <string, any> > respros = Pkg::ResolvableProperties (one_package, `package, "");

	    // All installed packages of the given name
	    list <map <string, any> > installed = filter (map <string, any> one_respro, respros, {
		return (one_respro["status"]:`unknown == `installed);
	    });

	    // All available packages of the given name
	    list <map <string, any> > available = filter (map <string, any> one_respro, respros, {
		return (one_respro["status"]:`unknown == `available);
	    });

	    // Such package is not installed
	    if (size (installed) < 1) {
		y2milestone ("Package %1 is not installed", one_package);
		return;
	    }

	    // Er, installed but not available
	    if (size (available) < 1) {
		y2warning ("Package %1 is installed but not available", one_package);
		return;
	    }

	    // Remember the installed version(s)
	    installed_versions[one_package] = maplist (map <string,any> one_installed, installed, {
		return one_installed["version"]:"unknown";
	    });

	    // Force upgrade/install
	    y2milestone ("Selecting package %1 for installation", one_package);
	    if (Pkg::ResolvableInstall (one_package, `package) == true) {
		some_packages_selected = true;
	    } else {
		y2error ("Cannot install package %1", one_package);
	    }
	});

	if (some_packages_selected != true) {
	    y2milestone ("No packages have been selected for upgrade");
	    return pkgs_affected;
	}

	// Calling solver to select the best version
	SolverRunWithFeedback();

	y2milestone ("Some packages have been selected, checking...");

	// Check whether the selected version is different to the already installed one
	foreach (string one_package, list <string> previously_installed_versions, installed_versions, {
	    list <map <string, any> > respros = Pkg::ResolvableProperties (one_package, `package, "");

	    // All selected packages of the given name
	    list <map <string, any> > selected = filter (map <string, any> one_respro, respros, {
		return (one_respro["status"]:`unknown == `selected);
	    });

	    // The package of a given name is selected
	    if (size (selected) > 0) {
		boolean selection_differs = false;

		foreach (map <string, any> one_selected, selected, {
		    if (! contains (previously_installed_versions, one_selected["version"]:"some-version")) {
			pkgs_affected = pkgs_affected + 1;
			selection_differs = true;
			break;
		    }
		});

		if (selection_differs != true) {
		    y2milestone ("Selection of packages doesn't differ, neutralizing package: %1", one_package);
		    Pkg::ResolvableNeutral (one_package, `package, false);
		}
	    }
	});

	return pkgs_affected;
    }

    Wagon::InitPkg();

    symbol ret = `auto;

    // Patches need solver run
    Pkg::PkgSolve (true);

    // Here the update stack updates itself
    integer selected = Pkg::ResolvablePreselectPatches (`affects_pkg_manager);

    // No patches selected
    if (selected < 1) {
	y2milestone ("There are no patches that would affect the package manager, trying packages...");

	any pkgs = ProductFeatures::GetFeature ("software", "packages_affecting_pkg_manager");

	if (pkgs == nil || pkgs == "" || pkgs == []) {
	    y2warning ("No packages_affecting_pkg_manager provided");
	} else {
	    list <string> packages = (list <string>) pkgs;
	    y2milestone ("Packages to upgrade: %1", packages);
	    selected = UpgradePackages (packages);
	}
    }

    y2milestone ("Selected resolvables: %1", selected);
    if (selected < 1) {
	y2milestone ("Neither patches nor packages for self-update have been selected");

        Wagon::RunHooks("after_self_update");

	return ret;
    }

    ret = SolveDependencies();

    if (ret != `abort) {
	// Solver ends with some resolvables changed
	if (Pkg::IsAnyResolvable (`any, `to_install) == true || Pkg::IsAnyResolvable (`any, `to_remove) == true) {
	    y2milestone ("Calling update...");
	    OnlineUpdateCallbacks::RegisterOnlineUpdateCallbacks();
	    any oui_ret = WFM::call ("online_update_install");
	    y2milestone ("Update returned: %1", oui_ret);
	    ret = `restart_same_step;
	} else {
	    y2milestone ("Nothing to install/remove");
	    ret = `auto;
	}

        Wagon::RunHooks("after_self_update");
    }

    y2milestone ("Returning: %1", ret);

    return ret;
}
