/**
 * File:
 *	clients/wagon_selfupdate.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id$
 *
 */

{
    textdomain "wagon";

    import "GetInstArgs";
    import "Wagon";
    import "FileUtils";
    import "ProductControl";
    import "ProductFeatures";
    import "Internet";
    import "OnlineUpdateCallbacks";
    import "Popup";
    import "Label";
    import "PackagesUI";
    import "Report";

    include "wagon/common_func.ycp";

    if (GetInstArgs::going_back()) {
	y2milestone ("Going back...");
	return `back;
    }

    Wagon::RunHooks("before_self_update");

    /**
     * Tries to upgrade packages got as parameter.
     *
     * @param list <string> of packages
     */
    integer UpgradePackages (list <string> & packages) {
	// Check the input
	packages = filter (string one_package, packages, {
	    return (one_package != nil && one_package != "");
	});

	integer pkgs_affected = 0;

	foreach (string one_package, packages, {
	    y2milestone ("Updating package %1", one_package);

	    if (Pkg::ResolvableUpdate(one_package, `package)) {
		pkgs_affected = pkgs_affected + 1;
	    }
	});

	if (pkgs_affected > 0) {
	    // run the solver to check dependencies
	    SolverRunWithFeedback();
	}

	return pkgs_affected;
    }

    Wagon::InitPkg();

    symbol ret = `auto;

    // Patches need solver run
    Pkg::PkgSolve (true);

    // Here the update stack updates itself
    integer selected = Pkg::ResolvablePreselectPatches (`affects_pkg_manager);

    // No patches selected
    if (selected < 1) {
	y2milestone ("There are no patches that would affect the package manager, trying packages...");

	any pkgs = ProductFeatures::GetFeature ("software", "packages_affecting_pkg_manager");

	if (pkgs == nil || pkgs == "" || pkgs == []) {
	    y2warning ("No packages_affecting_pkg_manager provided");
	} else {
	    list <string> packages = (list <string>) pkgs;
	    y2milestone ("Packages to upgrade: %1", packages);
	    selected = UpgradePackages (packages);
	}
    }

    y2milestone ("Selected resolvables: %1", selected);
    if (selected < 1) {
	y2milestone ("Neither patches nor packages for self-update have been selected");

        Wagon::RunHooks("after_self_update");

	return ret;
    }

    ret = SolveDependencies();

    if (ret != `abort) {
	// Solver ends with some resolvables changed
	if (Pkg::IsAnyResolvable (`any, `to_install) == true || Pkg::IsAnyResolvable (`any, `to_remove) == true) {
	    y2milestone ("Calling update...");
	    OnlineUpdateCallbacks::RegisterOnlineUpdateCallbacks();
	    any oui_ret = WFM::call ("online_update_install");
	    y2milestone ("Update returned: %1", oui_ret);
	    ret = `restart_same_step;
	} else {
	    y2milestone ("Nothing to install/remove");
	    ret = `auto;
	}

        Wagon::RunHooks("after_self_update");
    }

    y2milestone ("Returning: %1", ret);

    return ret;
}
