/**
 * File:
 *	include/wagon/common_func.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id$
 *
 */

{
    textdomain "wagon";

    import "Label";
    import "Popup";
    import "PackagesUI";
    import "Wagon";
    import "Wizard";
    import "GetInstArgs";
    import "Report";
    import "Directory";
    import "FileUtils";

    string solver_testcase_dir = sformat ("%1/wagon_solver_testcase", Directory::logdir);

    boolean SolverRunWithFeedback () {
	UI::OpenDialog (`Label (_("Solving the package dependencies...")));

	boolean ret = Pkg::PkgSolve (true);

	// BNC #582046: Store a solver testcase in case of solver issue
	if (ret != true) {
	    y2warning ("Solver failed, storing solver testcase to %1", solver_testcase_dir);

	    if (FileUtils::Exists (solver_testcase_dir)) {
		y2warning ("Directory %1 exists, removing first", solver_testcase_dir);
		SCR::Execute (.target.bash, sformat ("rm -rf %1", solver_testcase_dir));
	    }

	    Pkg::CreateSolverTestCase (solver_testcase_dir);
	    y2milestone ("Done");
	}

	UI::CloseDialog();

	return ret;
    }

    symbol SolveDependencies () {
	symbol ret = `auto;

	boolean solved = nil;

	while (solved != true) {
	    // Trying to solve automatically
	    solved = SolverRunWithFeedback();
	    symbol ret_sel = nil;

	    // PkgSolve didn't report any problem
	    if (solved == true) {
		y2milestone ("Solved automatically");
		ret = `auto;
	    // There are some issues in selecting the patches
	    } else {
		y2milestone ("Cannot be solved automatically");
		while (true) {
		    // Try to solve them manually
		    ret_sel = PackagesUI::RunPackageSelector ($["mode":`summaryMode]);

		    // Cannot or don't want to accept the proposal
		    if (ret_sel == `cancel) {
			// Confirmed
			if (Popup::AnyQuestion (
			    // TRANSLATORS: headline
			    _("Aborting the Upgrade"),
			    // TRANSLATORS: pop-up question
			    _("Cannot continue without installing the required patches.
Are you sure you want to abort the upgrade process?
"),
			    _("Abort Upgrade"),
			    Label::NoButton(),
			    `yes_button
			)) {
			    ret = `abort;
			    break;
			// Try again
			} else {
			    continue;
			}
		    // Solved manually
		    } else if (ret_sel == `accept) {
			ret = `auto;
			solved = true;
			break;
		    }
		}
	    }

	    if (ret == `abort) {
		solved = nil;
		y2warning ("Aborting...");
		break;
	    }

	    if (! Wagon::AcceptLicenses()) {
		y2warning ("Some license(s) have been rejected, running solver again");
		solved = nil;
	    }
	}

	return ret;
    }

    void ResetPackager () {
	Wizard::SetContents (
	    _("Resetting Software Manager"),
	    `Label(_("Resetting software manager...")),
	    "",
	    false, true
	);

	y2milestone ("Resetting Pkg");

	list<integer> repos = Pkg::GetUpgradeRepos();
	if (size(repos) > 0)
	{
	    y2milestone("Resetting upgrade repos config");
	    foreach(integer repo, repos, {Pkg::RemoveUpgradeRepo(repo);});
	}

	// reset solver flags
	Pkg::SetSolverFlags($["reset" : true]);

	Pkg::TargetFinish();
	Pkg::SourceFinishAll();

	Wagon::InitPkg();

	y2milestone ("Running solver");
	Pkg::PkgSolve (true);
    }

    integer FindRepoIdByAlias (string repo_alias) {
	integer repo_id = nil;

	map one_repo = $[];

	foreach (integer repo_id_to_check, Pkg::SourceGetCurrent (false /* all repos */), {
	    one_repo = Pkg::SourceGeneralData (repo_id_to_check);

	    if (one_repo["alias"]:"" == repo_alias) {
		repo_id = repo_id_to_check;
		break;
	    }
	});

	return repo_id;
    }

    /**
     * During the first (migration) registration, it's not needed to include
     * the optional data as it is also faster but after the migration, it's
     * better to to include them.
     * @see #BNC 576553
     */
    void AdjustSuseRegisterDefaults () {
	map argmap = GetInstArgs::argmap();

	if (argmap["suse_register_defaults"]:"" == "none") {
	    y2milestone (
		"suse_register: no optional data selected by default (%1/%2/%3)",
		SCR::Write (.sysconfig.suse_register.SUBMIT_OPTIONAL, "false"),
		SCR::Write (.sysconfig.suse_register.SUBMIT_HWDATA, "false"),
		SCR::Write (.sysconfig.suse_register, nil)
	    );
	} else if (argmap["suse_register_defaults"]:"" == "selected") {
	    y2milestone (
		"suse_register: all optional data selected by default (%1/%2/%3)",
		SCR::Write (.sysconfig.suse_register.SUBMIT_OPTIONAL, "true"),
		SCR::Write (.sysconfig.suse_register.SUBMIT_HWDATA, "true"),
		SCR::Write (.sysconfig.suse_register, nil)
	    );
	} else {
	    y2warning ("Undefined how to handled suse_register optional data");
	}
    }

    // Full paths to product files
    map <string, string> checked_product_files = $[];

    /**
     * Finds a package that provides the required product
     * defined by parameter.
     *
     * @return string product_package
     */
    string GetProductPackageName (map <string, any> product) {
        product = Wagon::MinimizeProductMap (product);
        string product_file = product["product_file"]:"";

        // undefined product file
        if (product_file == nil || product_file == "") {
            y2error ("Cannot remove product: %1, no product file defined", product);
            Report::Error (sformat(_("Cannot remove product %1."), product["name"]:_("Unknown product")));
            return "";
        }

        // unify the product file path
        if (! regexpmatch (product_file, "^/etc/products\\.d/.+"))
            product_file = sformat ("/etc/products.d/%1", product_file);

        // use a cached value
        if (haskey (checked_product_files, product_file)) {
            if (checked_product_files[product_file]:"" == "") {
                return "";
            } else {
                return checked_product_files[product_file]:"";
            }
        }

        string package_name = Wagon::GetFileOwner (product_file);

        // no package owns the file
        if (package_name == nil || package_name == "") {
            y2error ("Cannot find out file owner %1", product_file);
            Report::Error (sformat(_("Cannot find out owner of product %1."), product["name"]:_("Unknown product")));
            return "";
        }

        // cache the value
        checked_product_files[product_file] = package_name;

        return package_name;
    }
}
